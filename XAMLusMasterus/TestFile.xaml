<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">
    <Color x:Key="NormalBorderColor">#FF99FDDE</Color>
    <Color x:Key="PressedBorderColor">#FFB6FBE6</Color>
    <Color x:Key="TopGradientColor">#FFF1FDF8</Color>
    <Color x:Key="BottomGradientColor">#FFD5FCEF</Color>
    <Color x:Key="TopGradientHoverColor">#FFFFBBEB</Color>
    <Color x:Key="BottomGradientHoverColor">#FFFF2C8E</Color>
    <Color x:Key="HoverBorderColor">#FFFF5BCF</Color>
    <Color x:Key="TopGradientSelectColor">#FF79FCD3</Color>
    <Color x:Key="BottomGradientSelectColor">#FF05E5A0</Color>
    <Color x:Key="TopGradientPressedColor">#FFE8FDF6</Color>
    <Color x:Key="BottomGradientPressedColor">#FFC4FAE8</Color>
    <Color x:Key="DefaultedColor">#FF4EFBC6</Color>
    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>
    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="{StaticResource TopGradientColor}" Offset="0.0"/>
        <GradientStop Color="{StaticResource BottomGradientColor}" Offset="0.99"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="NormalBorderBrush" Color="{StaticResource NormalBorderColor}"/>
    <SolidColorBrush x:Key="LightBrush" Color="#FFFCFCFC"/>
    <SolidColorBrush x:Key="MouseOverBorderBrush" Color="{StaticResource HoverBorderColor}"/>
    <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="{StaticResource TopGradientHoverColor}" Offset="0.0"/>
        <GradientStop Color="{StaticResource BottomGradientHoverColor}" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="{StaticResource TopGradientPressedColor}" Offset="0.0"/>
        <GradientStop Color="{StaticResource BottomGradientPressedColor}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="PressedBorderBrush" Color="{StaticResource PressedBorderColor}"/>
    <LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0.499,0.953" StartPoint="0.499,0.046">
        <GradientStop Color="{StaticResource TopGradientSelectColor}" Offset="0"/>
        <GradientStop Color="{StaticResource BottomGradientSelectColor}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF9FDFF"/>
    <SolidColorBrush x:Key="DefaultedBorderBrush" Color="{StaticResource DefaultedColor}"/>
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#FF04C187"/>
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA"/>
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD"/>
    <SolidColorBrush x:Key="GlyphBrush" Color="#FF05E5A0"/>
    <Style x:Key="NuclearButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearButton}"/>
    </Style>
    <ControlTemplate x:Key="NuclearButton" TargetType="{x:Type Button}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid x:Name="Grid">
            <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
              Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
            <Border x:Name="Hover" Padding="{TemplateBinding Control.Padding}"
              Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource MouseOverBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" Opacity="0" Visibility="Visible"/>
            <Border x:Name="Pressed" Padding="{TemplateBinding Control.Padding}"
              Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}"
              BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" Opacity="0" Visibility="Visible"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefault" Value="true">
                <Setter TargetName="Border" Value="{DynamicResource DefaultedBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true"/>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearCheckBox}"/>
    </Style>
    <ControlTemplate x:Key="NuclearCheckBox" TargetType="{x:Type CheckBox}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="CheckedTrue">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="11"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="10"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedFalse">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ThreeStateOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ThreeStateOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="13" Height="13">
                    <Border x:Name="Border" Background="{DynamicResource NormalBrush}"
                  BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
                    <Border x:Name="Hover" Background="{DynamicResource MouseOverBrush}"
                  BorderBrush="{DynamicResource MouseOverBorderBrush}" BorderThickness="1,1,1,1"
                  CornerRadius="2,2,2,2" Opacity="0"/>
                    <Border x:Name="Pressed" Background="{DynamicResource PressedBrush}"
                  BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"
                  Opacity="0"/>
                    <Rectangle x:Name="ThreeState" Visibility="Visible" Fill="{DynamicResource GlyphBrush}" Margin="2,2,2,2"
                     RadiusX="1" RadiusY="1" Width="0" Height="0">
                        <Shape.Stroke>
                            <x:NullExtension/>
                        </Shape.Stroke>
                    </Rectangle>
                    <Path x:Name="path" Stretch="Fill" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" Width="11"
                Data="M 1.0924787,5.372821 L 3.1785986,10.519821 10.528543,2.5198207 "
                Margin="0.713,1.43,0.851,1.57" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10"/>
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="true" HorizontalAlignment="Left" Margin="5,0,0,0" VerticalAlignment="Top"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True"/>
                    <Condition Property="ToggleButton.IsThreeState" Value="true"/>
                </MultiTrigger.Conditions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource ThreeStateOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource ThreeStateOff}"/>
                </TriggerBase.ExitActions>
                <Setter TargetName="path" Property="UIElement.Visibility" Value="Hidden"/>
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="CheckedFalse_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CheckedTrue}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearRadioButton}"/>
    </Style>
    <ControlTemplate x:Key="NuclearRadioButton" TargetType="{x:Type RadioButton}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="CheckedTrue">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="7"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="7"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedFalse">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                       Storyboard.TargetProperty="(FrameworkElement.Width)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark"
                                       Storyboard.TargetProperty="(FrameworkElement.Height)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="13" Height="13">
                    <Ellipse x:Name="Ellipse_Border" StrokeThickness="1" Fill="{DynamicResource NormalBrush}"
                   Stroke="{DynamicResource NormalBorderBrush}"/>
                    <Ellipse x:Name="Hover" StrokeThickness="1" Fill="{DynamicResource MouseOverBrush}"
                   Stroke="{DynamicResource MouseOverBorderBrush}" Opacity="0"/>
                    <Ellipse x:Name="Pressed" StrokeThickness="1" Fill="{DynamicResource PressedBrush}"
                   Stroke="{DynamicResource PressedBorderBrush}" Opacity="0"/>
                    <Ellipse x:Name="CheckMark" Fill="{DynamicResource GlyphBrush}" HorizontalAlignment="Center"
                   VerticalAlignment="Center" Width="7" Height="7"/>
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="true" HorizontalAlignment="Left" Margin="5,0,0,0" VerticalAlignment="Top"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="CheckedFalse_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CheckedTrue}"/>
                </TriggerBase.ExitActions>
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse_Border" Property="Shape.Fill"/>
                <Setter TargetName="Ellipse_Border" Property="Shape.Stroke" Value="#40000000"/>
                <Setter Property="Control.Foreground" Value="#80000000"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RepeatButton}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource NormalBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1"/>
                        <Border x:Name="Hover" Background="{DynamicResource MouseOverBrush}"
                    BorderBrush="{DynamicResource MouseOverBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>
                        <Border x:Name="Pressed" Background="{DynamicResource PressedBrush}"
                    BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>
                        <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearThumbStyle" TargetType="{x:Type Thumb}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle x:Name="Rectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                       Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}"
                       Stroke="{DynamicResource NormalBorderBrush}"/>
                        <Rectangle x:Name="Hover" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2"
                       Fill="{DynamicResource MouseOverBrush}" Stroke="{DynamicResource MouseOverBorderBrush}" Opacity="0"/>
                        <Rectangle x:Name="Pressed" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2"
                       Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true"/>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Rectangle" Value="{DynamicResource MouseOverBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource MouseOverBorderBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}"
                       StrokeThickness="{TemplateBinding Control.BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                Background="{DynamicResource LightBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineUpCommand">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,4 L 8,4 4,0 Z"/>
                            </Grid>
                        </RepeatButton>
                        <Track x:Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource NuclearThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,0 L 4,4 8,0 Z"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Vertical"/>
                            <Setter TargetName="DecreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineLeftCommand"/>
                            <Setter TargetName="IncreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineRightCommand"/>
                            <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
                            <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}">
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                       Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}">
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1,1,1,1"
                    CornerRadius="2,2,2,2"/>
                        <ScrollViewer Margin="3,3,3,3" Style="{DynamicResource NuclearScrollViewer}" Focusable="false"
                          Background="{DynamicResource LightBrush}">
                            <StackPanel Margin="2" IsItemsHost="true"/>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="MouseOver">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseOverSelected">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseOutSelected">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectionInactiveOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InactiveBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectionInactiveOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InactiveBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="true" Margin="0,1,0,1">
                        <Border x:Name="Border" Opacity="1" Background="{DynamicResource NormalBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"
                    Padding="0,0,0,0"/>
                        <Border x:Name="Hover" Opacity="0" Background="{DynamicResource MouseOverBrush}"
                    BorderBrush="{DynamicResource MouseOverBorderBrush}" BorderThickness="1,1,1,1"
                    CornerRadius="2,2,2,2" Padding="0,0,0,0"/>
                        <Border x:Name="Selected" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"
                    Padding="0,0,0,0"/>
                        <Border x:Name="HoverSelected" Opacity="0" Background="{DynamicResource PressedBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"
                    Padding="0,0,0,0"/>
                        <Border x:Name="InactiveBorder" Opacity="0" Background="{DynamicResource PressedBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"
                    Padding="0,0,0,0"/>
                        <ContentPresenter x:Name="contentPresenter" Margin="5,2,0,2" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectionInactiveOff_BeginStoryboard" Storyboard="{StaticResource SelectionInactiveOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectionInactiveOn_BeginStoryboard" Storyboard="{StaticResource SelectionInactiveOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOver}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="MouseOut_BeginStoryboard" Storyboard="{StaticResource MouseOut}"/>
                            </TriggerBase.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="MouseOverSelected_BeginStoryboard" Storyboard="{StaticResource MouseOverSelected}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="MouseOutSelected_BeginStoryboard" Storyboard="{StaticResource MouseOutSelected}"/>
                            </TriggerBase.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Selected" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="Selected" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="InactiveBorder" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="InactiveBorder" Value="{DynamicResource DisabledBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="border" Padding="{TemplateBinding Control.Padding}"
                  Background="{DynamicResource LightBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                  BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                        <Grid SnapsToDevicePixels="false" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                         Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"/>
                            <Rectangle x:Name="Hover" Margin="0,0,0,0" Fill="{DynamicResource MouseOverBrush}"
                         Stroke="{DynamicResource MouseOverBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"
                         Opacity="0"/>
                            <Rectangle x:Name="Pressed" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                         Stroke="{DynamicResource PressedBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2" Opacity="0"/>
                            <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                            <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
                            <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center"
                                Grid.Column="1" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                            <Setter TargetName="Up_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Down_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="border" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="border" Padding="{TemplateBinding Control.Padding}"
                  Background="{DynamicResource LightBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                  BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                        <Grid SnapsToDevicePixels="false" Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"/>
                                <Rectangle x:Name="Hover" Margin="0,0,0,0" Fill="{DynamicResource MouseOverBrush}"
                           Stroke="{DynamicResource MouseOverBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                                <Rectangle x:Name="Pressed" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource PressedBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2" Opacity="0"/>
                                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top"
                                Grid.Row="1" RecognizesAccessKey="true">
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                            <Setter TargetName="Up_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Down_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="border" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                            <Setter TargetName="Rectangle" Value="{DynamicResource PressedBrush}" Property="Shape.Fill"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2"
                  BorderThickness="1,1,1,1" Background="{DynamicResource WindowBackgroundBrush}"
                  BorderBrush="{DynamicResource NormalBorderBrush}">
                        <Grid SnapsToDevicePixels="false" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"/>
                                <Rectangle x:Name="Hover" Margin="0,0,0,0" Fill="{DynamicResource MouseOverBrush}"
                           Stroke="{DynamicResource MouseOverBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                                <Rectangle x:Name="Pressed" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource PressedBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2" Opacity="0"/>
                                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center"
                                Grid.Column="1" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                            <Setter TargetName="Up_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Down_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="border" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2"
                  Background="{DynamicResource LightBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                  BorderThickness="1,1,1,1">
                        <Grid SnapsToDevicePixels="false" Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"/>
                                <Rectangle x:Name="Hover" Margin="0,0,0,0" Fill="{DynamicResource MouseOverBrush}"
                           Stroke="{DynamicResource MouseOverBorderBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                                <Rectangle x:Name="Pressed" Margin="0,0,0,0" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource PressedBrush}" StrokeThickness="0" RadiusX="2" RadiusY="2" Opacity="0"/>
                                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top"
                                Grid.Row="1" RecognizesAccessKey="true">
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                            <Setter TargetName="Up_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="Down_Arrow" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="border" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" FontFamily="{TemplateBinding Control.FontFamily}"
                            FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                            FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                            Foreground="{TemplateBinding Control.Foreground}"
                            HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            Padding="{TemplateBinding Control.Padding}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="0" MinWidth="0"
                            Style="{StaticResource ExpanderDownHeaderStyle}"
                            Content="{TemplateBinding HeaderedContentControl.Header}"
                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                            DockPanel.Dock="Top">
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsExpanded" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <Border x:Name="border" Visibility="Collapsed" Background="{DynamicResource WindowBackgroundBrush}"
                      BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1,1,1,1"
                      CornerRadius="2,0,2,2">
                                <ContentPresenter x:Name="ExpandSite" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1,1,1,1"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" DockPanel.Dock="Bottom"/>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="border" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Down"/>
                        <Trigger Property="Expander.ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter TargetName="border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Rectangle" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}"
                 Stroke="{DynamicResource NormalBorderBrush}"/>
            <Rectangle x:Name="Hover" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2"
                 Fill="{DynamicResource MouseOverBrush}" Opacity="0" Stroke="{DynamicResource NormalBorderBrush}"
                 Grid.ColumnSpan="2"/>
            <Rectangle x:Name="rectangle" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource LightBrush}"
                 Stroke="{DynamicResource NormalBorderBrush}"/>
            <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter Value="{DynamicResource PressedBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
                <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" Property="Shape.Stroke"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow" Property="Shape.Fill"/>
                <Setter TargetName="rectangle" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.01"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid>
            <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
              BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1" Padding="2"
              CornerRadius="2">
                <ScrollViewer x:Name="PART_ContentHost" Margin="0" Style="{DynamicResource NuclearScrollViewer}"
                      Background="{TemplateBinding Control.Background}"/>
            </Border>
            <Border x:Name="HoverBorder" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource GlyphBrush}"
              BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
            <Border x:Name="FocusedBorder" CornerRadius="1,1,1,1" BorderBrush="{DynamicResource GlyphBrush}"
              BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <MultiTrigger>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                    <Condition Property="UIElement.IsFocused" Value="false"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearComboBox}"/>
    </Style>
    <ControlTemplate x:Key="NuclearComboBox" TargetType="{x:Type ComboBox}">
        <Grid>
            <ToggleButton x:Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}"
                    Focusable="false" ClickMode="Press">
                <ToggleButton.IsChecked>
                    <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </ToggleButton.IsChecked>
            </ToggleButton>
            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center"
                        Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                        IsHitTestVisible="false"/>
            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}"
               HorizontalAlignment="Stretch" Margin="1,1,21,1" VerticalAlignment="Stretch" Focusable="true"
               IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}">
                <FrameworkElement.Style>
                    <x:NullExtension/>
                </FrameworkElement.Style>
            </TextBox>
            <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
             Focusable="false" AllowsTransparency="true" PopupAnimation="Fade">
                <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
              MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true">
                    <Border x:Name="DropDownBorder" Background="{DynamicResource LightBrush}"
                  BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Margin="4,6,4,6" Style="{DynamicResource NuclearScrollViewer}">
                        <Grid>
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}"
                           Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                           Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
                <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="2,2,2,2"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.IsTabStop" Value="false"/>
                <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
                        <Border x:Name="Hover" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" Opacity="0"
                    Background="{DynamicResource SelectedBackgroundBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}"/>
                        <ContentPresenter Margin="5,2,0,2" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="ValueChangedOn">
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.5000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.7000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOn">
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical"
                                            Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)"
                                            RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="Background">
                        <Border x:Name="PART_Track" Background="{DynamicResource PressedBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="2"/>
                        <Border x:Name="PART_Indicator" HorizontalAlignment="Left" CornerRadius="2">
                            <Grid>
                                <Border x:Name="IndicatorBackgroundBorder" Background="{DynamicResource MouseOverBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="2,2,2,2">
                                    <FrameworkElement.LayoutTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </FrameworkElement.LayoutTransform>
                                </Border>
                                <Border x:Name="ValueChangedBorder" CornerRadius="2,2,2,2" BorderThickness="1">
                                    <UIElement.OpacityMask>
                                        <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                            <GradientStop Color="#00000000" Offset="0"/>
                                            <GradientStop Color="#00000000" Offset="1"/>
                                            <GradientStop Color="#00000000" Offset="0.48"/>
                                        </LinearGradientBrush>
                                    </UIElement.OpacityMask>
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                    </Border.Background>
                                </Border>
                                <Border x:Name="ValueChangedBorder_Vertical" CornerRadius="2,2,2,2" Visibility="Hidden" BorderThickness="1">
                                    <UIElement.OpacityMask>
                                        <LinearGradientBrush EndPoint="0.5,-0.385" StartPoint="0.501,1.385">
                                            <GradientStop Color="#00000000" Offset="0"/>
                                            <GradientStop Color="#00000000" Offset="1"/>
                                            <GradientStop Color="#00000000" Offset="0.48"/>
                                        </LinearGradientBrush>
                                    </UIElement.OpacityMask>
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                    </Border.Background>
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="IndeterminateBorder" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"
                    CornerRadius="2" Visibility="Visible">
                            <UIElement.OpacityMask>
                                <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#00000000" Offset="1"/>
                                    <GradientStop Color="#00000000" Offset="0.48"/>
                                </LinearGradientBrush>
                            </UIElement.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFD0D0D0" Offset="0"/>
                                    <GradientStop Color="{DynamicResource WhiteColor}" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="IndeterminateBorder_Vertical" BorderBrush="{DynamicResource SolidBorderBrush}"
                    BorderThickness="1" CornerRadius="2" Visibility="Hidden">
                            <UIElement.OpacityMask>
                                <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#00000000" Offset="1"/>
                                    <GradientStop Color="#00000000" Offset="0.48"/>
                                </LinearGradientBrush>
                            </UIElement.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFD0D0D0" Offset="0"/>
                                    <GradientStop Color="{DynamicResource WhiteColor}" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter TargetName="Background" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Indicator" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="IndeterminateBorder_Vertical" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ValueChangedBorder_Vertical" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="IndeterminateBorder" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="ValueChangedBorder" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="IndicatorBackgroundBorder" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="PART_Track" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="PART_Track" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_Indicator" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="PART_Indicator" Value="{DynamicResource DisabledBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="RangeBase.ValueChanged">
                            <BeginStoryboard x:Name="ValueChangedOn_BeginStoryboard" Storyboard="{StaticResource ValueChangedOn}"/>
                        </EventTrigger>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="IndeterminateOn_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <StopStoryboard BeginStoryboardName="IndeterminateOn_BeginStoryboard"/>
                            </TriggerBase.ExitActions>
                            <Setter TargetName="IndeterminateBorder" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearTextBox}"/>
    </Style>
    <ControlTemplate x:Key="NuclearTextBox" TargetType="{x:Type TextBox}">
        <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.01"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </FrameworkTemplate.Resources>
        <Grid>
            <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
              BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1" Padding="2"
              CornerRadius="2">
                <ScrollViewer x:Name="PART_ContentHost" Margin="0" Style="{DynamicResource NuclearScrollViewer}"
                      Background="{TemplateBinding Control.Background}"/>
            </Border>
            <Border x:Name="HoverBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
              BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
            <Border x:Name="FocusedBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
              BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                </TriggerBase.EnterActions>
            </Trigger>
            <MultiTrigger>
                <TriggerBase.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                </TriggerBase.ExitActions>
                <TriggerBase.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </TriggerBase.EnterActions>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                    <Condition Property="UIElement.IsFocused" Value="false"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.01"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1" Padding="2"
                    CornerRadius="2">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Style="{DynamicResource NuclearScrollViewer}"
                            Background="{TemplateBinding Control.Background}"/>
                        </Border>
                        <Border x:Name="HoverBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
                    BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
                        <Border x:Name="FocusedBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
                    BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="UIElement.IsFocused" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.01"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1" Padding="2"
                    CornerRadius="2">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Style="{DynamicResource NuclearScrollViewer}"
                            Background="{TemplateBinding Control.Background}"/>
                        </Border>
                        <Border x:Name="HoverBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
                    BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
                        <Border x:Name="FocusedBorder" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource GlyphBrush}"
                    BorderThickness="1,1,1,1" Opacity="0" Margin="-1,-1,-1,-1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="UIElement.IsFocused" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <StackPanel IsItemsHost="true" ClipToBounds="true" Orientation="Horizontal"
                        Background="{DynamicResource NormalBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <StackPanel IsItemsHost="true" ClipToBounds="true" Orientation="Vertical"
                        Background="{DynamicResource NormalBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15"/>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="Border">
                        <Grid Width="Auto" Height="Auto">
                            <Border x:Name="Hover" Opacity="0" HorizontalAlignment="Stretch" Width="Auto"
                      Background="{DynamicResource SelectedBackgroundBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1"/>
                            <Grid Width="Auto" Height="Auto">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="26" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition x:Name="columnDefinition" Width="37"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                                <Grid x:Name="GlyphPanel" Visibility="Hidden" Margin="4,0,6,0" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                        Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z" FlowDirection="LeftToRight"/>
                                </Grid>
                                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" RecognizesAccessKey="true" ContentSource="Header"
                                  Margin="2,2,0,2" VerticalAlignment="Center"/>
                                <TextBlock Margin="{TemplateBinding Control.Padding}" Grid.Column="3"
                           Text="{TemplateBinding MenuItem.InputGestureText}"/>
                                <Grid x:Name="ArrowPanel" Column="4" Margin="4,0,6,0" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                        Data="M 0,0 L 0,8 4,4 Z"/>
                                </Grid>
                                <Popup x:Name="SubMenuPopup" Placement="Right" Focusable="false" AllowsTransparency="true"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Popup.IsOpen>
                                        <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </Popup.IsOpen>
                                    <Grid x:Name="SubMenu" VerticalAlignment="Stretch">
                                        <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                                        <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                            <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
                            <Setter Property="Control.Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="HeaderHost" Property="FrameworkElement.Margin" Value="-10,1,0,1"/>
                            <Setter TargetName="columnDefinition" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                            <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
                            <Setter Property="Control.Padding" Value="6,3,6,3"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="HeaderHost" Property="FrameworkElement.Margin" Value="-10,1,0,1"/>
                            <Setter TargetName="columnDefinition" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="0,2,0,2"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Icon">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuPopup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="0,0,3,3"/>
                            <Setter TargetName="SubMenu" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"
                      Property="UIElement.BitmapEffect"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Separator}">
        <Setter Property="FrameworkElement.Height" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="0,2,0,2"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="FrameworkElement.Height" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="0,2,0,2"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Margin="8,2,2,0" Grid.Column="0" Grid.Row="0" IsItemsHost="true" ZIndex="1"
                      KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                            <UIElement.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </UIElement.RenderTransform>
                        </TabPanel>
                        <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" Background="{DynamicResource LightBrush}"
                    BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="1" CornerRadius="2"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.TabIndex="2">
                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,8,2,2"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedTrue">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedFalse">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="grid">
                        <FrameworkElement.LayoutTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </FrameworkElement.LayoutTransform>
                        <Border x:Name="Border" Background="{DynamicResource NormalBrush}"
                    BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,0"
                    CornerRadius="15,7,0,0" Margin="-4,0,0,0"/>
                        <Border x:Name="Hover" Background="{DynamicResource MouseOverBrush}"
                    BorderBrush="{DynamicResource MouseOverBorderBrush}" BorderThickness="1,1,1,0"
                    CornerRadius="15,7,0,0" Opacity="0" Margin="-4,0,0,0"/>
                        <Border x:Name="HoverSelected" Background="{DynamicResource DefaultedBorderBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="15,7,0,0"
                    Opacity="0" Margin="-4,0,0,0"/>
                        <Border x:Name="Selected" Background="{DynamicResource SelectedBackgroundBrush}"
                    BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,0"
                    CornerRadius="15,7,0,0" Opacity="0" Margin="-4,0,0,0"/>
                        <Grid x:Name="grid1" Width="Auto" Height="Auto" Margin="0,0,2,1">
                            <FrameworkElement.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </FrameworkElement.LayoutTransform>
                            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" Margin="8,2,8,2" VerticalAlignment="Center"
                                RecognizesAccessKey="true" ContentSource="Header">
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Left">
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Right">
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="ContentSite" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                                <Condition SourceName="grid" Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource SelectedBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="Border" Property="UIElement.Opacity" Value="0.8"/>
                        </MultiTrigger>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedFalse_BeginStoryboard" Storyboard="{StaticResource SelectedFalse}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedTrue}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="Selected" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="Selected" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NuclearSliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="14"/>
        <Setter Property="FrameworkElement.Width" Value="14"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Ellipse x:Name="Ellipse" Fill="{DynamicResource SelectedBackgroundBrush}"
                     Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1"/>
                        <Ellipse x:Name="Hover" Fill="{DynamicResource MouseOverBrush}"
                     Stroke="{DynamicResource MouseOverBorderBrush}" StrokeThickness="1" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse" Property="Shape.Fill"/>
                            <Setter TargetName="Ellipse" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick" Visibility="Collapsed" Height="4" SnapsToDevicePixels="true" Placement="Top"
                     Fill="{DynamicResource GlyphBrush}"/>
                        <Border x:Name="Border" Grid.Row="1" Margin="0" Height="4" CornerRadius="2"
                    Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"
                    BorderThickness="1,1,1,1"/>
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource NuclearSliderThumb}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar x:Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" SnapsToDevicePixels="true"
                     Placement="Bottom" Fill="{TemplateBinding Control.Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="Slider.Orientation" Value="Vertical">
                            <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Horizontal"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource DefaultedBorderBrush}" BorderThickness="1" CornerRadius="2,2,2,2">
                            <ScrollViewer Style="{DynamicResource NuclearScrollViewer}" Focusable="false"
                            Background="{TemplateBinding Control.Background}" Padding="4" HorizontalScrollBarVisibility="Auto"
                            VerticalScrollBarVisibility="Auto" CanContentScroll="false" Margin="1,1,1,1">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15" Height="13" Background="Transparent">
                        <Path x:Name="IsExpandedPath" Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1"
                  VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 8,4 4,8 Z"/>
                        <Path x:Name="ExpandPath" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Center"
                  Fill="{DynamicResource GlyphBrush}" Data="M 4,0 L 8,4 4,8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="IsExpandedPath" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                            <Setter TargetName="ExpandPath" Value="{DynamicResource DisabledForegroundBrush}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="IsExpandedPath" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="ExpandPath" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Style.Triggers>
            <Trigger Property="TreeViewItem.IsSelected" Value="true">
                <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="1,0,0,0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Name="SelectedOff" x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Name="HoverOn" x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverSelectOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverSelectOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" ClickMode="Press">
                            <ToggleButton.IsChecked>
                                <Binding Path="IsExpanded" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </ToggleButton.IsChecked>
                            <Control.Background>
                                <x:NullExtension/>
                            </Control.Background>
                            <Control.BorderBrush>
                                <x:NullExtension/>
                            </Control.BorderBrush>
                            <Control.Foreground>
                                <x:NullExtension/>
                            </Control.Foreground>
                        </ToggleButton>
                        <Border x:Name="Selection_Border" Grid.Column="1" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="Selected" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
                                <Border x:Name="Hover" Opacity="0" Background="{DynamicResource MouseOverBrush}"
                        BorderBrush="{DynamicResource MouseOverBorderBrush}" BorderThickness="1,1,1,1"
                        CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverSelected" Opacity="0" Background="{DynamicResource DefaultedBorderBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" Height="Auto" Margin="3,0,3,0"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter TargetName="Selection_Border" Value="{DynamicResource SelectedBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="Selection_Border" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="Selection_Border" Value="{DynamicResource NormalBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Selection_Border" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="TreeViewItem.IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                <Condition SourceName="Selection_Border" Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverSelectOn_BeginStoryboard" Storyboard="{StaticResource HoverSelectOn}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverSelectOff_BeginStoryboard" Storyboard="{StaticResource HoverSelectOff}"/>
                            </TriggerBase.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter Property="FrameworkElement.MinWidth" Value="50"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearButton}"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearRadioButton}"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearCheckBox}"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearComboBox}"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="Control.Template" Value="{DynamicResource NuclearTextBox}"/>
    </Style>
    <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ToolBarButtonHover" Color="{StaticResource TopGradientHoverColor}"/>
    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BdHover"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Bd" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BdHover"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Bd" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,3,3,0"
                    Background="{DynamicResource NormalBorderBrush}"/>
                        <Border x:Name="BdHover" SnapsToDevicePixels="true" CornerRadius="0,3,3,0"
                    Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom"
                    Width="6" Height="7">
                            <Path Stroke="White" Data="M 1,1.5 L 6,1.5 "/>
                            <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0.5 L 5,0.5 "/>
                            <Path Fill="White" Data="M 0.5,4 L 6.5,4 3.5,7 Z"/>
                            <Path Fill="{TemplateBinding Control.Foreground}" Data="M -0.5,3 L 5.5,3 2.5,6 Z"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource TopGradientHoverColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="{StaticResource BottomGradientColor}"/>
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="{StaticResource NormalBorderColor}"/>
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border SnapsToDevicePixels="true" Background="Transparent" Padding="{TemplateBinding Control.Padding}">
                        <Rectangle>
                            <Shape.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4"
                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  CornerRadius="0,0,3,3">
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom"
                    Width="7" Height="6">
                            <Path Stroke="White" Data="M 1.5,1 L 1.5,6 "/>
                            <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0.5,0 L 0.5,5 "/>
                            <Path Fill="White" Data="M 3.5,0.5 L 7,3.5 4,6.5 Z"/>
                            <Path Fill="{TemplateBinding Control.Foreground}" Data="M 3,-0.5 L 6,2.5 3,5.5 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Control.Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="3,1,1,1">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                            Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press">
                                <FrameworkElement.FocusVisualStyle>
                                    <x:NullExtension/>
                                </FrameworkElement.FocusVisualStyle>
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsOverflowOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <Popup x:Name="OverflowPopup" Focusable="false" AllowsTransparency="true" Placement="Bottom"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     StaysOpen="false">
                                <Popup.IsOpen>
                                    <Binding Path="IsOverflowOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <Border x:Name="Shdw">
                                    <Border BorderThickness="1,1,1,1" Background="{DynamicResource LightBrush}"
                          BorderBrush="{DynamicResource NormalBorderBrush}">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Focusable="true"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2" WrapWidth="200"
                                          KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle">
                                            <FrameworkElement.FocusVisualStyle>
                                                <x:NullExtension/>
                                            </FrameworkElement.FocusVisualStyle>
                                        </ToolBarOverflowPanel>
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Margin="0,0,11,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3,3,3,3"
                    Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource NormalBorderBrush}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Padding="6,5,1,6" Margin="-3,-1,0,0"
                       Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                                <ContentPresenter x:Name="ToolBarHeader" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  HorizontalAlignment="Center" Margin="4,0,4,0" VerticalAlignment="Center" ContentSource="Header"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Margin="0,1,2,2" IsItemsHost="true" Background="{DynamicResource NormalBrush}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="HeaderedItemsControl.Header">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="Border.Background" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
                            <Setter TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"
                      Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
                            <Setter Value="{StaticResource ToolBarVerticalBackground}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="#FF000000"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Margin="2" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Style TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Control.Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderSelected"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource NormalBrush}"
                    CornerRadius="3,3,3,3" BorderBrush="{DynamicResource LightBorderBrush}"/>
                        <Border x:Name="BorderSelected" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource SelectedBackgroundBrush}"
                    CornerRadius="3,3,3,3" BorderBrush="{DynamicResource LightBorderBrush}" Opacity="0"/>
                        <Border x:Name="BorderHover" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource PressedBorderBrush}"
                    CornerRadius="3,3,3,3" BorderBrush="{DynamicResource LightBorderBrush}" Opacity="0"/>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                              HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground" Value="#ADADAD"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="BorderSelected" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Control.BorderBrush" Value="#D5DFE5"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                    Background="{TemplateBinding Control.Background}" BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4"/>
                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentSource="Header"
                                RecognizesAccessKey="true"/>
                        </Border>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Margin="{TemplateBinding Control.Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2"/>
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4">
                            <UIElement.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </UIElement.OpacityMask>
                            <Border x:Name="border" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3"
                      BorderBrush="{DynamicResource DefaultedBorderBrush}">
                                <Border x:Name="border1" BorderBrush="White" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="border1" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Control.Padding}">
                            <ScrollViewer Focusable="false" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden">
                                <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2,0,2,0">
                                    <GridViewHeaderRowPresenter.AllowsColumnReorder>
                                        <Binding Path="TemplatedParent.View.AllowsColumnReorder" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.AllowsColumnReorder>
                                    <GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContainerStyle"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                                    <GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderContextMenu"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                                    <GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderTemplate" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                                    <GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderTemplateSelector"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                                    <GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                        <Binding Path="TemplatedParent.View.ColumnHeaderToolTip" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                                    <GridViewRowPresenterBase.Columns>
                                        <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewRowPresenterBase.Columns>
                                </GridViewHeaderRowPresenter>
                            </ScrollViewer>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      KeyboardNavigation.DirectionalNavigation="Local"/>
                        </DockPanel>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0.0">
                            <RangeBase.Value>
                                <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0.0">
                            <RangeBase.Value>
                                <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </RangeBase.Value>
                        </ScrollBar>
                        <DockPanel Grid.Column="1" Grid.Row="1" LastChildFill="false">
                            <Panel.Background>
                                <Binding Path="Background" ElementName="PART_VerticalScrollBar"/>
                            </Panel.Background>
                            <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Width="1"
                         Fill="White" DockPanel.Dock="Left"/>
                            <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Height="1"
                         Fill="White" DockPanel.Dock="Top"/>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,0,0,0"
                  BorderBrush="{DynamicResource DefaultedBorderBrush}" Background="{DynamicResource LightBrush}">
                        <ScrollViewer Padding="{TemplateBinding Control.Padding}"
                          Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background"/>
                            <Setter TargetName="Bd" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
                <Setter Property="Control.Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
        <Setter Property="Control.Padding" Value="5,2,5,2"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectionInactiveOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InActiveBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectionInactiveOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InActiveBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverSelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverSelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="border" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                        <Grid Margin="2,0,2,0">
                            <Border x:Name="Border" Background="{DynamicResource NormalBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="2,2,2,2" Padding="0,0,0,0"
                      BorderThickness="1,1,1,1"/>
                            <Border x:Name="SelectedBorder" Background="{DynamicResource SelectedBackgroundBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="2,2,2,2" Padding="0,0,0,0"
                      BorderThickness="1,1,1,1" Opacity="0"/>
                            <Border x:Name="HoverBorder" Background="{DynamicResource MouseOverBrush}"
                      BorderBrush="{DynamicResource MouseOverBorderBrush}" CornerRadius="2,2,2,2" Padding="0,0,0,0"
                      BorderThickness="1,1,1,1" Opacity="0"/>
                            <Border x:Name="SelectedHoverBorder" Background="{DynamicResource SelectedBackgroundBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="2,2,2,2" Padding="0,0,0,0"
                      BorderThickness="1,1,1,1" Opacity="0"/>
                            <Border x:Name="InActiveBorder" Background="{DynamicResource PressedBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="2,2,2,2" Padding="0,0,0,0"
                      BorderThickness="1,1,1,1" Opacity="0"/>
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="0,2,0,2"
                                    VerticalAlignment="Stretch"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="SelectionInactiveOff_BeginStoryboard" Storyboard="{StaticResource SelectionInactiveOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="SelectionInactiveOn_BeginStoryboard" Storyboard="{StaticResource SelectionInactiveOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverSelectedOff_BeginStoryboard" Storyboard="{StaticResource HoverSelectedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="HoverSelectedOn_BeginStoryboard" Storyboard="{StaticResource HoverSelectedOn}"/>
                            </TriggerBase.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectedHoverBorder" Value="{DynamicResource PressedBrush}"
                      Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="SelectedBorder" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="SelectedBorder" Value="{DynamicResource DisabledBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter TargetName="InActiveBorder" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
                            <Setter TargetName="InActiveBorder" Value="{DynamicResource DisabledBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-8.5"/>
        <Setter Property="FrameworkElement.Width" Value="18"/>
        <Setter Property="FrameworkElement.Height">
            <Setter.Value>
                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="0,3,0,4"/>
        <Setter Property="Control.Background" Value="{DynamicResource PressedBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="#00FFFFFF">
                        <Rectangle HorizontalAlignment="Center" Width="0.5">
                            <Shape.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="Control.Padding" Value="2,0,2,0"/>
        <Setter Property="Control.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <FrameworkTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </FrameworkTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Grid>
                            <Border x:Name="Main" CornerRadius="2,2,2,2" Background="{DynamicResource SelectedBackgroundBrush}"
                      BorderThickness="1,1,1,1" BorderBrush="{DynamicResource SolidBorderBrush}"/>
                            <Border x:Name="Hover" CornerRadius="2,2,2,2" Background="{DynamicResource MouseOverBrush}"
                      BorderThickness="1,1,1,1" BorderBrush="{DynamicResource MouseOverBorderBrush}" Opacity="0"/>
                            <Border x:Name="Pressed" BorderThickness="1,1,1,1" Padding="{TemplateBinding Control.Padding}" Opacity="0"
                      Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" RecognizesAccessKey="true" Margin="4,2,4,2"/>
                        </Grid>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}"
                     HorizontalAlignment="Stretch"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Main" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
                            <Setter TargetName="Main" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                            </TriggerBase.EnterActions>
                        </Trigger>
                        <Trigger Property="FrameworkElement.Height" Value="Auto">
                            <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="GridViewColumnHeader.Role" Value="Floating">
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter Property="Control.Background" Value="Yellow"/>
                            <Setter Value="{DynamicResource MouseOverBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>